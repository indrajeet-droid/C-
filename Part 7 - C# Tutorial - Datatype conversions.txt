Implicit Conversion:- 

Done by Compiler
	1. when there is no loss of information
	2. when there is no possibility of throwing exceptions during conversion

Example:- Converting an int to a float will not loose any data and no exception will be thrown, hence an implicit conversion can be done

where as when converting a float to an int, we loose the fractional part and also a possibility of overflow exception(float is bigger than int datatype) in this case an explicit conversion is required. For explicit conversion we can use cast operator the convert class in c#  





Explicit Conversion Example:-

float f = 100.25F;

        // Cannot implicitly convert float to int.
        // Fractional part will be lost. Float is a
        // bigger datatype than int, so there is
        // also a possiblity of overflow exception
        // int i = f;

        // Use explicit conversion using cast () operator
        int i = (int)f;

        // OR use Convert class
        // int i = Convert.ToInt32(f);


Difference between Parse and TryParse
1. If the number is in a string format you have 2 options - Parse() and TryParse() 
2. Parse() method throws an exception if it cannot parse the value, whereas TryParse() returns a bool indicating whether it succeeded or failed.
3. Use Parse() if you are sure the value will be valid, otherwise use TryParse() 

string str = "100f";

         int result;
         bool isConversionSuccessful = int.TryParse(str,out result);

         if(isConversionSuccessful)
         {
             Console.WriteLine("result is {0}",result);
         }
         else
         {
             Console.WriteLine("conversion failed");
         }


